<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>helloworld</artifactId>
    <version>1.0-SNAPSHOT</version>
    <!--不指定默认打成jar包-->
    <packaging>jar</packaging>

    <!-- 一、依赖管理（版本控制）
    使用springboot要引入父工程(父项目是用来做依赖管理的，几乎声明了所有开发中依赖的版本号)
    -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.4.2</version>
    </parent>

    <dependencies>
        <!--二、自动配置-->
        <!--web场景启动器-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!--简化Javabean开发的:
            (1)导入依赖，（2）安装lombok插件，（3）使用注解@data(getter setter) @toString  @AllArgsConstructor @NoArgsConstructor @EqualsAndHashcode
            简化日志打印：添加注解@slf4j 打印日志log.info()
            -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!--程序有变动时ctrl+F9热更新，严格意义上是restart重启。想要reload用Jrebel-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!--要创建可执行jar，需要添加spring-boot-maven-plugin-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>